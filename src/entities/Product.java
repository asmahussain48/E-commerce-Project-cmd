package entities;

import utils.DatabaseConnection;

import java.sql.*;

public class Product extends category {
    private int id;
    private String name;
    private String brand;
    private String model;
    private String productDescription;
    private double price;
    private int quantity;
    private boolean isAvailable;

    public Product() {
        super();
    }

    public Product(int id, String name, String brand, String model, String productDescription, double price, int quantity, boolean isAvailable) {
        super();
        this.id=id;
        this.name=name;
        this.brand=brand;
        this.model=model;
        this.productDescription=productDescription;
        this.price=price;
        this.quantity=quantity;
        this.isAvailable=isAvailable;
    }

    public Product(String name, String brand, String model, String productDescription, double price, int quantity, boolean isAvailable) {
        super();
        this.name=name;
        this.brand=brand;
        this.model=model;
        this.productDescription=productDescription;
        this.price=price;
        this.quantity=quantity;
        this.isAvailable=isAvailable;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id=id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name=name;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand=brand;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model=model;
    }

    public String getProductDescription() {
        return productDescription;
    }

    public void setProductDescription(String productDescription) {
        this.productDescription=productDescription;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        if (price < 0) {
            throw new IllegalArgumentException("Price must be a positive value.");
        }
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity=quantity;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable=available;
    }
    // Insert product into database
    public void saveToDatabase() {
        String sql = "INSERT INTO products (name, brand, model, product_description, price, quantity, is_available) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        // The code snippet con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS) is used when you
        // want to execute an SQL statement (like INSERT) and retrieve the automatically generated keys (such as the primary key)
        // that were generated by the database.

        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(2, name);
            ps.setString(3, brand);
            ps.setString(4, model);
            ps.setString(5, productDescription);
            ps.setDouble(6, price);
            ps.setInt(7, quantity);
            ps.setBoolean(8, isAvailable);

            int rows = ps.executeUpdate();
            if (rows > 0) {
                ResultSet rs = ps.getGeneratedKeys();
                if (rs.next()) {
                    this.id = rs.getInt(1); // set generated id
                    System.out.println("Product saved with ID: " + id);
                }
            }
        } catch (SQLException e) {
            System.out.println("Error saving product: " + e.getMessage());
        }
    }
    //id
    public static Product fetchProductById(int productId) {
        String sql = "SELECT * FROM products WHERE id = ?";
        try (Connection con = DatabaseConnection.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {

            ps.setInt(1, productId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                return new Product(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("brand"),
                        rs.getString("model"),
                        rs.getString("product_description"),
                        rs.getDouble("price"),
                        rs.getInt("quantity"),
                        rs.getBoolean("is_available")

                );
            }

        } catch (SQLException e) {
            System.out.println("Error fetching product: " + e.getMessage());
        }

        return null;
    }

    public void display() {
        System.out.printf("%-10s %-20s %-15s %-15s %-30s %-10s %-10s %-12s\n",
                "ID", "Name", "Brand", "Model", "Description", "Price", "Quantity", "Available");
        System.out.println("----------------------------------------------------------------------------------------");
        System.out.printf("%-10d %-20s %-15s %-15s %-30s $%-10.2f %-10d %-12s\n",
                id, name, brand, model, productDescription, price, quantity, (isAvailable ? "Yes" : "No"));
        System.out.println("----------------------------------------------------------------------------------------");
    }
    public static void viewAllProducts() {
        String sql = "SELECT * FROM products";
        try (Connection con = DatabaseConnection.getConnection(); // Reusing the connection method
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            System.out.printf("%-10s %-20s %-15s %-15s %-30s %-10s %-10s %-12s\n",
                    "ID", "Name", "Brand", "Model", "Description", "Price", "Quantity", "Available");
            System.out.println("----------------------------------------------------------------------------------------");

            while (rs.next()) {
                Product product = new Product(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("brand"),
                        rs.getString("model"),
                        rs.getString("product_description"),
                        rs.getDouble("price"),
                        rs.getInt("quantity"),
                        rs.getBoolean("is_available")
                );
                // Display each product in the table format
                product.display();
            }

        } catch (SQLException e) {
            System.out.println("Error fetching all products: " + e.getMessage());
        }
    }



    public void updateProductInDatabase() {
        String sql = "UPDATE products SET name=?, brand=?, model=?, product_description=?, price=?, quantity=?, is_available=? WHERE id=?";
        try (Connection con = DatabaseConnection.getConnection(); // Reusing the connection method
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, name);
            ps.setString(2, brand);
            ps.setString(3, model);
            ps.setString(4, productDescription);
            ps.setDouble(5, price);
            ps.setInt(6, quantity);
            ps.setBoolean(7, isAvailable);
            ps.setInt(8, id);
            int rows = ps.executeUpdate();
            if (rows > 0) {
                System.out.println("Product updated in database.");
            } else {
                System.out.println("No product found with ID " + id);
            }
        } catch (SQLException e) {
            System.out.println("Error updating product: " + e.getMessage());
        }
    }

    public static void deleteProductFromDatabase(int productId) {
        String sql = "DELETE FROM products WHERE id=?";
        try (Connection con = DatabaseConnection.getConnection(); // Reusing the connection method
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, productId);
            int rows = ps.executeUpdate();
            if (rows > 0) {
                System.out.println("Product deleted from database.");
            } else {
                System.out.println("No product found with ID " + productId);
            }
        } catch (SQLException e) {
            System.out.println("Error deleting product: " + e.getMessage());
        }
    }

        //SearchProduct
    public static void searchProduct(String keyword) {
        // trimming spaces and converting to lowercase for case-insensitive matching
        keyword = keyword.trim().toLowerCase();
        boolean found = false;  // Flag to track if any products match the search

        // SQL query to search for products where the brand or model contains the keyword (case-insensitive)
        String sql = "SELECT * FROM products WHERE LOWER(brand) LIKE ? OR LOWER(model) LIKE ?";

        try (Connection con = DatabaseConnection.getConnection(); // Establish database connection
             PreparedStatement ps = con.prepareStatement(sql)) { // Prepare SQL query for execution, avoiding SQL injection

            // Add wildcards (%) around the keyword for partial matching, e.g., searching for "vivo" will match "vivo 19"
            String searchKeyword = "%" + keyword + "%";  // Wildcard allows any characters before or after the keyword

            // Set the prepared statement parameters for the brand and model fields
            ps.setString(1, searchKeyword);  // Set first placeholder for the brand column
            ps.setString(2, searchKeyword);  // Set second placeholder for the model column
            //SELECT * FROM products WHERE LOWER(brand) LIKE '%vivo%' OR LOWER(model) LIKE '%vivo%';

            // Execute the query and get the result set (i.e., the products that match the search criteria)
            try (ResultSet rs = ps.executeQuery()) {
                // Iterate over the result set to display matching products
                while (rs.next()) {
                    // Retrieve product details from the result set
                    int id = rs.getInt("id");
                    String name = rs.getString("name");
                    String brand = rs.getString("brand");
                    String model = rs.getString("model");
                    String productDescription = rs.getString("product_description");
                    double price = rs.getDouble("price");
                    int quantity = rs.getInt("quantity");
                    boolean isAvailable = rs.getBoolean("is_available");

                    // Create a Product object using the retrieved data
                    Product product = new Product(id, name, brand, model, productDescription, price, quantity, isAvailable);
                    product.display(); //matched product display
                    found = true;
                }
            }
        } catch (SQLException e) {
            System.out.println("Error searching products: " + e.getMessage());
        }
        if (!found) {
            System.out.println("No matching mobile found.");
        }
    }


}
/*
Class Name:
Product
Method Names:
getCategoryId
setCategoryId
getName
setName
getBrand
setBrand
getModel
setModel
getProductDescription
setProductDescription
getPrice
setPrice
getQuantity
setQuantity
isAvailable
setAvailable
getConnection (private method)
saveToDatabase
display
updateProductInDatabase
deleteProductFromDatabase (static method)
 */


/*
// Create Product object                                    these are variables
        Product product = new Product(categoryId, name, brand, model, description, price, quantity, isAvailable);
        // Save to database
        product.saveToDatabase();
 */